from flask import Flask ,jsonify ,request
# del modulo flask importar la clase Flask y los métodos jsonify,request
from flask_cors import CORS       # del modulo flask_cors importar CORS
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from sqlalchemy import Column, Integer, String, Float, ForeignKey
app=Flask(__name__)  # crear el objeto app de la clase Flask
CORS(app) #modulo cors es para que me permita acceder desde el frontend al backend


# configuro la base de datos, con el nombre el usuario y la clave
app.config['SQLALCHEMY_DATABASE_URI']='mysql+pymysql://root:root@localhost/pda_db'
# URI de la BBDD                          driver de la BD  user:clave@URLBBDD/nombreBBDD
app.config['SQLALCHEMY_TRACK_MODIFICATIONS']=False #none
db= SQLAlchemy(app)   #crea el objeto db de la clase SQLAlquemy
ma=Marshmallow(app)   #crea el objeto ma de de la clase Marshmallow


# # defino las tablas
# class User(db.Model):   # la clase User hereda de db.Model de SQLAlquemy   
#     __tablename__ = 'users'  # Explicitly define table name

#     id=db.Column(db.Integer, primary_key=True)   #define los campos de la tabla
#     name=db.Column(db.String(100), nullable=False)
#     surname=db.Column(db.String(100))
#     email=db.Column(db.String(124), unique=True)
#     phone=db.Column(db.Integer, nullable=True)
#     password=db.Column(db.String(128))
#     photo=db.Column(db.String(400))
#     type_user=db.Column(db.Boolean, name='Type_user')

#     def __init__(self,name,surname,email,phone, password, photo, type_user): #crea el  constructor de la clase
#         self.name=name # no hace falta el id porque lo crea sola mysql por ser auto_incremento
#         self.surname=surname
#         self.email=email
#         self.phone=phone
#         self.password=password
#         self.photo=photo
#         self.type_user=type_user

    #  si hay que crear mas tablas , se hace aqui

#------------------------------------------------------------------------------

# class Pet(db.Model):
#     __tablename__ = 'pets' 

#     id = Column(Integer, primary_key=True) 
#     name = Column(String(100))
#     description = Column(String(255))  
#     photo = Column(String(255))  
#     weight = Column(Float) 
#     breed = Column(String(100)) 
#     age = Column(Integer)

#     #constructor de la clase pet
#     def __init__(self,name,description,photo,weight,breed,age):
#         self.name=name
#         self.description=description
#         self.photo=photo
#         self.weight=weight
#         self.breed=breed
#         self.age=age

#--------------------------------------------------------------------------



with app.app_context():
    db.create_all()  # aqui crea todas las tablas si es que no estan creadas
#  ************************************************************
# class UserSchema(ma.Schema):
#     class Meta:
#         fields=('id','name','surname','email','phone', 'password', 'photo', 'type_user')


#--------------------------------------------------------------------------
# class PetSchema(ma.Schema):
#     class Meta:
#         fields=('id', 'name', 'description', 'photo', 'weight', 'breed', 'age')
#--------------------------------------------------------------------------


# user_schema=UserSchema()  # El objeto user_schema es para traer un user
# users_schema=UserSchema(many=True)  # El objeto users_schema es para traer multiples registros de user

#--------------------------------------------------------------------------
# pet_schema=PetSchema()
# pets_schema=PetSchema(many=True)
#--------------------------------------------------------------------------


# crea los endpoint o rutas 
# @app.route('/users',methods=['GET'])
# def get_Users():
#     all_users=User.query.all() # el metodo query.all() lo hereda de db.Model
#     result=users_schema.dump(all_users)  #el metodo dump() lo hereda de ma.schema y
#                                                  # trae todos los registros de la tabla
#     return jsonify(result)     # retorna un JSON de todos los registros de la tabla

#--------------------------------------------------------------Route PETS
# @app.route('/pets',methods=['GET'])
# def get_Pets():
#     all_pets=Pet.query.all()
#     result=pets_schema.dump(all_pets)
#     return jsonify(result)
#--------------------------------------------------------------


# @app.route('/users/<id>',methods=['GET'])
# def get_user(id):
#     user=User.query.get(id)
#     return user_schema.jsonify(user)   # retorna el JSON de un user recibido como parametro

#--------------------------------------------------------------Route PETS
# @app.route('/pets/<id>',methods=['GET'])
# def get_pet(id):
#     pet=Pet.query.get(id)
#     return pet_schema.jsonify(pet)
#--------------------------------------------------------------


# @app.route('/users/<id>',methods=['DELETE'])
# def delete_user(id):
#     user=User.query.get(id)
#     db.session.delete(user)
#     db.session.commit()                     # confirma el delete
#     return user_schema.jsonify(user) # me devuelve un json con el registro eliminado

#--------------------------------------------------------------Route PETS
# @app.route('/pets/<id>',methods=['DELETE'])
# def delete_pet(id):
#     pet=Pet.query.get(id)
#     db.session.delete(pet)
#     db.session.commit()
#     return pet_schema.jsonify(pet)
#--------------------------------------------------------------

# @app.route('/users', methods=['POST']) # crea ruta o endpoint
# def create_user():
#     #print(request.json)  # request.json contiene el json que envio el cliente
  
#     name=request.json['name']
#     surname=request.json['surname']
#     email=request.json['email']
#     phone=request.json['phone']
#     password=request.json['password']
#     photo=request.json['photo']
#     type_user=request.json['type_user']

#     new_user=User(name, surname, email, phone, password, photo, type_user)
#     db.session.add(new_user)
#     db.session.commit() # confirma el alta
#     return user_schema.jsonify(new_user)

# ---------------------------------------------------------------
    #pruba: excluyo la contraseña del return
    # excluded_fields_schema = user_schema.exclude['password'] 
    # excluded_fields_data = excluded_fields_schema.dump(new_user)
    # return jsonify(excluded_fields_schema)

#-----------------------------------------------------------------

#--------------------------------------------------------------Route PETS
# @app.route('/pets', methods=['POST'])
# def create_pet():
    
#     name=request.json['name']
#     description=request.json['description']
#     weight=request.json['weight']
#     breed=request.json['breed']
#     age=request.json['age']
#     photo=request.json['photo']
  

#     new_pet=Pet(name, description, photo, weight, breed, age)
#     db.session.add(new_pet)
#     db.session.commit()
#     return pet_schema.jsonify(new_pet)

  #--------------------------------------------------------------

# @app.route('/users/<id>' ,methods=['PUT'])
# def update_user(id):
#     user=User.query.get(id)
 
#     user.name=request.json['name']
#     user.surname=request.json['surname']
#     user.email=request.json['email']
#     user.phone=request.json['phone']
#     user.password=request.json['password']
#     user.photo=request.json['photo']
#     user.type_user=request.json['type_user']


#     db.session.commit()    # confirma el cambio
#     return user_schema.jsonify(user)    # y retorna un json con el user
 
#--------------------------------------------------------------Route PETS
# @app.route('/pets/<id>' ,methods=['PUT'])
# def update_pet(id):
#     pet=Pet.query.get(id)
 
#     pet.name=request.json['name']
#     pet.description=request.json['description']
#     pet.weight=request.json['weight']
#     pet.breed=request.json['breed']
#     pet.age=request.json['age']
#     pet.photo=request.json['photo']
   
#     db.session.commit()
#     return pet_schema.jsonify(pet)
 
#--------------------------------------------------------------


# programa principal *******************************
if __name__=='__main__':  
    app.run(debug=True, port=5000)   # ejecuta el servidor Flask en el puerto 5000


